#BlueJ class context
comment0.target=SuperTextBox
comment0.text=\r\n\ A\ flexible\ single-\ or\ multi-line\ Text\ Box.\r\n\ \r\n\ <h2>Version\ 1.0\ -\ Multi-Line\!</h2>\r\n\ \r\n\ <h3>Notes</h3>\r\n\ <ul>\r\n\ \ <li>\ Height\ is\ set\ automatically\ to\ fit.\ See\ below\ for\ a\ detailed\ description\ of\ how\ it's\ calculated.\ The\ easiest\ way\ to\ \r\n\ \ \ \ \ \ \ get\ the\ height\ in\ order\ to\ position\ it\ is\ to\ have\ it\ build\ itself,\ and\ then\ call\ getHeight()\ on\ the\ created\ object.</li>\r\n\ \ <li>\ Border\ Thickness\ is\ optional\ -->\ Set\ it\ to\ zero\ (0)\ to\ create\ a\ box\ with\ no\ border</li>\r\n\ \ <li>\ If\ you\ turn\ on\ centered,\ the\ processing\ cost\ goes\ up\ dramatically\ upon\ updates.\ This\ is\ really\ only\ an\ issue\ if\ you\ plan\r\n\ \ \ \ \ \ \ to\ publish\ to\ the\ Greenfoot\ Gallery.\ If\ you\ are,\ please\ consider\ not\ using\ centered,\ or\ updating\ very\ sparingly.\ </li>\r\n\ </ul>\r\n\ \r\n\ <p>\ To\ understand\ <b>height</b>\ examine\ the\ following\ equation\:</p>\r\n\ <code>height\ \=\ (padding\ *\ 2)\ +\ (vSpace\ *\ (numLines))\ +\ (fontSize\ *\ numLines)\ +\ (2\ *\ borderThickness);</code>\r\n\ \r\n\ @author\ Jordan\ Cohen\r\n\ @version\ 1.0\ (November\ 30,\ 2021)\r\n
comment1.params=line\ font\ width
comment1.target=SuperTextBox(java.lang.String,\ greenfoot.Font,\ int)
comment1.text=\r\n\ \ Simple\ Constructor\ -\ One\ line\ text\ box\r\n\ \ \r\n\ \ @param\ line\ \ \ \ \ The\ line\ of\ text\ to\ display\r\n\ \ @param\ font\ \ \ \ \ The\ font\ to\ display\r\n\ \ @param\ width\ \ \ \ The\ desired\ width\ of\ the\ text\ box\ in\ pixels\r\n
comment10.params=
comment10.target=void\ update()
comment11.params=textIn\ fromBottom
comment11.target=void\ updateLine(java.lang.String,\ boolean)
comment11.text=\r\n\ Update\ the\ Multi\ Line\ Text\ box\ by\ adding\ a\ new\ line.\ This\ can\ add\ a\ line\r\n\ at\ the\ top\ or\ bottom,\ and\ will\ move\ the\ other\ lines\ accordingly.\r\n\ \r\n\ @param\ textIn\ \ \ \ The\ new\ String\ to\ add\ to\ the\ display\r\n\ @param\ fromBottom\ \ \ \ Should\ the\ line\ go\ at\ the\ bottom\ (scroll\ up),\ or\ false\ to\ insert\ it\ at\ the\ top\ (scroll\ down)\r\n
comment12.params=backColor\ foreColor\ borderColor
comment12.target=void\ setColors(greenfoot.Color,\ greenfoot.Color,\ greenfoot.Color)
comment12.text=\r\n\ Set\ or\ change\ Colors.\r\n\ \r\n\ @param\ backColor\ \ \ \ \ The\ Background\ colour\r\n\ @param\ foreColor\ \ \ \ \ The\ text\ colour\r\n\ @param\ borderColor\ \ \ the\ border\ colour\r\n
comment13.params=height
comment13.target=void\ forceHeight(int)
comment14.params=
comment14.target=void\ toggleCentered()
comment15.params=font\ text
comment15.target=int\ getStringWidth(greenfoot.Font,\ java.lang.String)
comment15.text=\r\n\ <h3>Mr.\ Cohen's\ Text\ Centering\ Algorithm</h3>\r\n\ \r\n\ <p>Get\ the\ Width\ of\ a\ String,\ if\ it\ was\ printed\ out\ using\ the\ drawString\ command\ in\ a\ particular\r\n\ Font.</p>\r\n\ <p>There\ is\ a\ performance\ cost\ to\ this,\ although\ it\ is\ more\ significant\ on\ the\ Gallery,\ and\ \r\n\ especially\ on\ the\ Gallery\ when\ browsed\ on\ a\ mobile\ device.\ It\ is\ appropriate\ to\ call\ this\ in\ the\ \r\n\ constructor,\ and\ in\ most\ cases\ it\ is\ ideal\ NOT\ to\ call\ it\ from\ an\ act\ method,\ especially\r\n\ every\ act.</p>\r\n\ \r\n\ <p>In\ cases\ where\ values\ are\ pre-determined,\ it\ may\ be\ ideal\ to\ cache\ the\ values\ (save\ them)\ so\ \r\n\ you\ don't\ have\ to\ run\ this\ repeatedly\ on\ the\ same\ text.\ If\ you\ do\ this\ in\ the\ World\ constructor,\r\n\ there\ is\ no\ performance\ cost\ while\ running.</p>\r\n\ \r\n\ <h3>Performance\ &\ Compatibility\:</h3>\r\n\ <ul>\r\n\ \ <li>\ Locally,\ performance\ should\ be\ sufficient\ on\ any\ moderate\ computer\ (average\ call\ 0.1-0.2ms\ on\ my\ laptop)</li>\r\n\ \ <li>\ To\ be\ compatible\ with\ Greenfoot\ Gallery,\ removed\ use\ of\ getAwtImage()\ and\ replaced\ with\ getColorAt()\ on\ a\ GreenfootImage</li>\r\n\ \ <li>\ On\ Gallery,\ performance\ is\ about\ 10x\ slower\ than\ locally\ (4ms\ on\ Gallery\ via\ Computer).\ For\ reference,\ an\ act()\ should\ be\r\n\ \ \ \ \ \ \ less\ than\ 16.6ms\ to\ maintain\ 60\ frames/acts\ per\ second.\ </li>\r\n\ \ <li>\ HUGE\ performance\ drop\ on\ Gallery\ via\ Mobile\ devices\ -\ not\ sure\ why,\ going\ to\ ignore\ for\ now.\ (Average\ update\ duration\ 34ms,\ more\r\n\ \ \ \ \ \ \ than\ 2\ optimal\ acts)</li>\r\n\ </ul>\r\n\ \r\n\ @param\ font\ the\ GreenFoot.Font\ which\ is\ being\ used\ to\ draw\ text\r\n\ @param\ text\ the\ actual\ text\ to\ be\ drawn\r\n\ @return\ int\ \ the\ width\ of\ the\ String\ text\ as\ draw\ in\ Font\ font,\ in\ pixels.\r\n\ \r\n\ @since\ June\ 2021\r\n\ @version\ December\ 2021\ -\ Even\ more\ Efficiency\ Improvement\ -\ sub\ 0.06ms\ per\ update\ on\ setSpeed(100)\!\r\n
comment2.params=text\ font\ width
comment2.target=SuperTextBox(java.lang.String[],\ greenfoot.Font,\ int)
comment2.text=\r\n\ \ Simple\ Constructor\ -\ Multi-line\ text\ box\r\n\ \ \r\n\ \ @param\ line\ \ \ \ \ The\ line\ of\ text\ to\ display\r\n\ \ @param\ font\ \ \ \ \ The\ font\ to\ display\r\n\ \ @param\ width\ \ \ \ The\ desired\ width\ of\ the\ text\ box\ in\ pixels\r\n
comment3.params=text\ font\ width\ centered
comment3.target=SuperTextBox(java.lang.String[],\ greenfoot.Font,\ int,\ boolean)
comment3.text=\r\n\ \ Simple\ Constructor\ -\ Multi-line\ text\ box\r\n\ \ \r\n\ \ @param\ line\ \ \ \ \ The\ line\ of\ text\ to\ display\r\n\ \ @param\ font\ \ \ \ \ The\ font\ to\ display\r\n\ \ @param\ width\ \ \ \ The\ desired\ width\ of\ the\ text\ box\ in\ pixels\r\n\ \ @param\ centered\ Set\ to\ true\ to\ center\ the\ text\ (performance\ cost)\r\n
comment4.params=line\ backColor\ foreColor\ font\ centered\ width\ borderThickness\ borderColor
comment4.target=SuperTextBox(java.lang.String,\ greenfoot.Color,\ greenfoot.Color,\ greenfoot.Font,\ boolean,\ int,\ int,\ greenfoot.Color)
comment4.text=\r\n\ The\ detailed\ constructor\ for\ ONE-LINE\ text\ boxes.\r\n\ \r\n\ @param\ line\ \ \ \ \ \ \ \ \ \ A\ single\ String,\ which\ will\ be\ the\ starting\ text\ for\ this\ one-line\ text\ box\r\n\ @param\ backColor\ \ \ \ \ The\ background\ colour\ of\ the\ text\ box\r\n\ @param\ foreColor\ \ \ \ \ The\ text\ colour\ of\ the\ text\ box\r\n\ @param\ font\ \ \ \ \ \ \ \ \ \ The\ (Greenfoot)\ Font\ to\ display\r\n\ @param\ centered\ \ \ \ \ \ Should\ the\ text\ be\ centered?\ (Note\ -\ this\ has\ a\ performance\ cost,\ especially\ for\ the\ Greenfoot\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ Gallery\ and\ doubly\ so\ for\ accessing\ the\ Gallery\ via\ mobile\ device)\r\n\ @param\ width\ \ \ \ \ \ \ \ \ The\ width,\ in\ pixels,\ for\ this\ text\ box\r\n\ @param\ borderThickness\ \ \ The\ thickness\ of\ the\ border.\ Setting\ this\ to\ zero\ will\ make\ a\ borderless\ text\ box\r\n\ @param\ borderColor\ \ \ The\ color\ of\ the\ border\r\n
comment5.params=text\ backColor\ foreColor\ font\ centered\ width\ borderThickness\ borderColor
comment5.target=SuperTextBox(java.lang.String[],\ greenfoot.Color,\ greenfoot.Color,\ greenfoot.Font,\ boolean,\ int,\ int,\ greenfoot.Color)
comment5.text=\r\n\ Primary\ Constructor.\r\n\ \r\n\ @param\ text\ \ \ \ \ \ \ \ \ \ The\ array\ of\ text.\ Number\ of\ lines\ will\ be\ equal\ to\ the\ size\ of\ this\ array.\r\n\ @param\ backColor\ \ \ \ \ The\ background\ colour\ of\ the\ text\ box\r\n\ @param\ foreColor\ \ \ \ \ The\ text\ colour\ of\ the\ text\ box\r\n\ @param\ font\ \ \ \ \ \ \ \ \ \ The\ (Greenfoot)\ Font\ to\ display\r\n\ @param\ centered\ \ \ \ \ \ Should\ the\ text\ be\ centered?\ (Note\ -\ this\ has\ a\ performance\ cost,\ especially\ for\ the\ Greenfoot\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ Gallery\ and\ doubly\ so\ for\ accessing\ the\ Gallery\ via\ mobile\ device)\r\n\ @param\ width\ \ \ \ \ \ \ \ \ The\ width,\ in\ pixels,\ for\ this\ text\ box\r\n\ @param\ borderThickness\ \ \ The\ thickness\ of\ the\ border.\ Setting\ this\ to\ zero\ will\ make\ a\ borderless\ text\ box\r\n\ @param\ borderColor\ \ \ The\ color\ of\ the\ border\r\n
comment6.params=width\ vSpace\ padding\ borderThickness\ fontSize\ numLines
comment6.target=greenfoot.GreenfootImage\ generateImage(int,\ int,\ int,\ int,\ int,\ int)
comment7.params=width\ height
comment7.target=greenfoot.GreenfootImage\ generateImage(int,\ int)
comment8.params=textLine
comment8.target=void\ update(java.lang.String)
comment8.text=\r\n\ Simplest\ Update\ -\ Intended\ primarily\ for\ text\ boxes\ with\ only\ one\ line.\ \r\n\ \r\n\ For\ text\ boxes\ with\ one\ line,\ this\ will\ insert\ the\ text\ at\ the\ BOTTOM.\r\n\ \r\n\ For\ text\ boxes\ with\ just\ a\ single\ line,\ this\ will\ replace\ the\ existing\ text\ and,\ if\r\n\ centering\ is\ turned\ on,\ recenter.\ For\ more\ precise\ control,\ use\ update\ (String[])\ or\r\n\ updateLine(String,\ boolean).\r\n\ \r\n\ @param\ text\ the\ line\ of\ text\ to\ add.\ \r\n
comment9.params=text
comment9.target=void\ update(java.lang.String[])
comment9.text=\r\n\ Update\ with\ a\ whole\ new\ array\ of\ text.\ \r\n\ \r\n\ Note\ that\ if\ you\ have\ centering\ turned\ on\ this\ has\ significant\ CPU\ cost\ because\ it\ will\r\n\ call\ the\ getStringWidth\ method\ as\ many\ times\ as\ there\ are\ Strings\ in\ String[]\ text.\r\n\ For\ example,\ if\ there\ are\ four\ lines\ of\ text,\ it\ would\ call\ the\ method\ four\ times,\r\n\ which\ in\ the\ best\ case\ is\ 12-16ms\ (on\ a\ fast\ local\ computer)\ which\ will\ almost\ certainly\r\n\ slow\ your\ acts\ below\ 60\ fps.\ On\ the\ Greenfoot\ Gallery,\ the\ time\ for\ this\ method\ to\ run\r\n\ is\ about\ 10x\ slower,\ or\ about\ 120-160ms,\ which\ is\ enough\ for\ perceptible\ lag.\ \r\n\ \r\n\ It\ is\ better\ to\ call\ updateLine\ for\ centered\ text,\ as\ \r\n\ it\ maintains\ the\ previously\ calculated\ values\ for\ the\ existing\ lines\ and\ only\ calls\r\n\ the\ getStringWidth\ method\ once\ for\ the\ new\ text\ inserted.\r\n\ \r\n\ If\ you're\ not\ centering\ your\ text,\ you\ can\ ignore\ the\ above.\r\n
numComments=16
